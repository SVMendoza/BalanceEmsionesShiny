})
}
##########################################################
ModuloPropagacionMCBalanceXFeTotal <- function(id, dtsTotal) {
moduleServer(id, function(input, output, session) {
observeEvent(input$Run, {
set.seed(input$nseed)
nsim<-input$num_simulaciones
CI<-input$IC
if(input$Propaga=="Adición") type.Propag<-'ADDITION' else if(input$Propaga=="Sustracción") type.Propag<-'SUBTRACTION' else type.Propag<-'MULTIPLICATION'
f<-function(x) {
sal<-try(IMC(propag.Vari=paste0('S',x$Estrato), nsim=nsim, Mean=x$Mean, SE=x$S.E, nplot=100,
CI=CI, type.Propag=type.Propag, plot=FALSE),silent=TRUE)
if(class(sal)=='try-error') { sal<-data.frame(NA,NA,NA,NA,NA)
names(sal)<-c('Mean','S.E','Lower (95%)','Upper (95%)','Uncertainty 95%')
}
else {sal<-round(sal,3)
}
sal
}
dFE<-as.data.frame(dtsTotal()[[1]][[3]]  )
FEnam<-unique(dFE$FE)
Ldtt<-list()
for(i in 1:length(FEnam)){
subDtEst<- subset(dFE, FE==FEnam[i])
spDtEst<-split(subDtEst, subDtEst$Yrs)
L<-lapply(spDtEst, function(x) f(x))
Yrsname=names( L)
Ldtt[[i]]<-data.frame(Yrs=Yrsname, FE=FEnam[i], do.call(rbind, L))
}
Ldttt<<-as.data.frame(do.call(rbind, Ldtt))
output$RESULT <-DT::renderDataTable({ DT::datatable(Ldttt,
options = list(pageLength = 12,autoWidth = TRUE,
dom= "rt"),
rownames = FALSE,
escape   = FALSE,
editable = TRUE)
})
})
return(
reactive({DT::datatable(Ldttt) })
)
})
}
################################################################
ModuloPropagacionMCBalanceTotal <- function(id, dtsTotall) {
moduleServer(id, function(input, output, session) {
observeEvent(input$Run, {
set.seed(input$nseed)
nsim<-input$num_simulaciones
CI<-input$IC
if(input$Propaga=="Adición") type.Propag<-'ADDITION' else if(input$Propaga=="Sustracción") type.Propag<-'SUBTRACTION' else type.Propag<-'MULTIPLICATION'
f<-function(x) {
sal<-try(IMC(propag.Vari=paste0('S',x$FE), nsim=nsim, Mean=x$Mean, SE=x$E.E, nplot=100,
CI=CI, type.Propag=type.Propag, plot=FALSE),silent=TRUE)
if(class(sal)=='try-error') { sal<-data.frame(NA,NA,NA,NA,NA)
names(sal)<-c('Mean','S.E','Lower (95%)','Upper (95%)','Uncertainty 95%')
}
else {sal<-round(sal,3)
}
sal
}
dTot<-as.data.frame(dtsTotall()[[1]][[3]]  )
if(length(unique(dTot$FE))>1) {
spDtEst<-split(dTot, dTot$Yrs)
L<-lapply(spDtEst, function(x) f(x))
Yrsname=names(L)
Ldtt2<<-data.frame(Yrs=Yrsname, do.call(rbind, L))
}
else {
Ldtt2<<-dTot
showNotification("Solamente tienes un FE. resultado igual a la ventana anterior", type = "message")
}
output$RESULT <-DT::renderDataTable({ DT::datatable(Ldtt2,
options = list(pageLength = 12,autoWidth = TRUE,
dom= "rt"),
rownames = FALSE,
escape   = FALSE,
editable = TRUE)
})
})
return(
reactive({DT::datatable(Ldtt2) })
)
})
}
############################################################################################
####################################
## REPORTE
Moduloreporte <- function(id, datosRes,datosResMC,  datosActRef,
datosActRefMC, datosActReS, datosActReSMC, datosBalanceMC,
datosBalancexFExYrsMC, datosBalanceTotalXyrs) {
moduleServer(id, function(input, output, session) {
observeEvent(input$RunReporte, {
tryCatch({
# Verificar si todos los elementos de la lista son data frames
lista_datos <- list(datosRes, datosActRef, datosActRefMC, datosActReS, datosActReSMC,
datosBalanceMC, datosBalancexFExYrsMC, datosBalanceTotalXyrs)
es_data_frame <- function(x) {is.data.frame(x()[[1]][[3]])}
todos_data_frames <- all(sapply(lista_datos, es_data_frame))
}, error = function(e) {
if (grepl("object 'dMCRef' not found", e$message)) {
showModal(modalDialog(title = "No hay acciones disponibles",
"No se ha definido ninguna acción para realizar.",
easyClose = TRUE))
} else {
eventReporte()
ReportExcel()
}
} )
})
})
}
## SUS FUNCIONES
eventReporte<-function() {
ResevorioDt<-datosRes()[[1]][[3]]
ResevorioDtMC<-datosResMC()[[1]][[3]]
##Actividad
#Referencia
RefereDt<-datosActRef()[[1]][[3]]
RefereDtMC<-datosActRefMC()[[1]][[3]]
#Resultados
ReSereDt<-datosActReS()[[1]][[3]]
ReSereDtMC<-datosActReSMC()[[1]][[3]]
#Balances
BalanceXEstratoFEYrsDt<-datosBalanceMC()[[1]][[3]]
BalancexFEYrs<-datosBalancexFExYrsMC()[[1]][[3]]
BalancexYrs<-datosBalanceTotalXyrs()[[1]][[3]]
contenidoReporte <- paste0("# Reporte de estimaciones\n\n",
"### Reservorios\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(ResevorioDt), caption = 'Resevorios')\n",
"knitr::kable(head(ResevorioDtMC), caption = 'Total de estimación')\n\n",
"```","### Datos de actividad:\n\n",
"knitr::kable(head(RefereDt), caption = 'Referencia')\n",
"knitr::kable(head(ReSereDt), caption = 'Resultados')\n\n",
"```",
"knitr::kable(head(RefereDtMC), caption = 'Referencia Carbono Monte Carlo')\n",
"knitr::kable(head(ReSereDtMC), caption = 'Resultados Carbono Monte Carlo')\n\n",
"### Balances:\n\n",
"knitr::kable(head(BalanceXEstratoFEYrsDt), caption = 'Resultados - Referencia. Monte Carlo')\n",
"knitr::kable(head(BalancexFEYrs), caption = 'Balance FE y Años. Monte Carlo')\n\n",
"knitr::kable(head(BalancexYrs), caption = 'Balance total por año. Monte Carlo')\n")
writeLines(contenidoReporte, "reporte_final.Rmd")
output$renderedReporte <- renderUI({
includeMarkdown(knitr::knit("reporte_final.Rmd"))
})
}
ReportExcel<-function() {output$downloadReport <- downloadHandler(
filename = function() {
if (input$format == "PDF") {
"reporte_generado.pdf"
} else if (input$format == "Word") {
"reporte_generado.docx"
} else {
"reporte_generado.xlsx"
}
},
content = function(file) {
if (input$format %in% c("PDF", "Word")) {
# Generar PDF o Word a partir del contenido Markdown
rmarkdown::render(text = contenidoReporte, output_format = paste0(input$format, "_document"), output_file = file)
} else {
# Guardar las tablas en un archivo Excel
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, "Resevorios")
openxlsx::writeData(wb, "Resevorios", data.frame(ResevorioDt))
openxlsx::addWorksheet(wb, "SumReservoriosMC")
openxlsx::writeData(wb, "SumReservoriosMC", data.frame(ResevorioDtMC))
openxlsx::addWorksheet(wb, "ReferenciaArea")
openxlsx::writeData(wb, "ReferenciaArea", data.frame(RefereDt))
openxlsx::addWorksheet(wb, "ReferenciaMC")
openxlsx::writeData(wb, "ReferenciaMC", data.frame(RefereDtMC))
openxlsx::addWorksheet(wb, "ResultadosArea")
openxlsx::writeData(wb, "ResultadosArea", data.frame(ReSereDt))
openxlsx::addWorksheet(wb, "ResultadosMC")
openxlsx::writeData(wb, "ResultadosMC", data.frame(ReSereDtMC))
openxlsx::addWorksheet(wb, "BalanceRES-REF_MC")
openxlsx::writeData(wb, "BalanceRES-REF_MC", data.frame(BalanceXEstratoFEYrsDt))
openxlsx::addWorksheet(wb, "BalanceFEYrs")
openxlsx::writeData(wb, "BalanceFEYrs", data.frame(BalancexFEYrs))
openxlsx::addWorksheet(wb, "BalanceYrs")
openxlsx::writeData(wb, "BalanceYrs", data.frame(BalancexYrs))
openxlsx::saveWorkbook(wb, file)
}
}
)
}
###################################################
########################################################
##########################################################
ui <- fluidPage(
titlePanel(title = span(img(src = system.file("www", "logo.png"), height = 65),"Estimación de las reducciones de emisiones")),
tabsetPanel(
tabPanel("Reservorios", tabsetPanel(
tabPanel("Entrada",ReservorioUI('modulo0')),
tabPanel('result', ParaEntradaUI('modulo01'))
)),
tabPanel("Datos de actividad (referencia)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo1')),
tabPanel('result', ParaEntradaUI('modulo11')))),
tabPanel("Datos de actividad (resultados)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo2')),
tabPanel('result', ParaEntradaUI('modulo21')))),
tabPanel("Balance emisiones", tabsetPanel(
tabPanel('Resultados balance', ParaEntradaUI('modulo3')),
tabPanel('Balance por estrato', ParaEntradaUI('modulo31')),
tabPanel('Balance total', ParaEntradaUI('modulo32')))),
tabPanel("Guardar Reporte" ,Report('modulo4'))
) #Close outer tabsetPanel
)
server <- function(input, output, session) {
ReservMC <- fServer0("modulo0")
dtRes<-ModuloPropagacionMC('modulo01', datos = ReservMC)
dtREF<-fServerAct('modulo1')
dtREFMC<-ModuloPropagacionMCREF('modulo11', dts1=dtREF, dts2=dtRes)
dtRESUL<-fServerAct('modulo2')
dtRESULMC<-ModuloPropagacionMCRES('modulo21', dts1=dtRESUL, dts2=dtRes)
dtBalance<-ModuloPropagacionMCBalance('modulo3', dts1=dtRESULMC, dts2=dtREFMC)
dtBalanceTotal<-ModuloPropagacionMCBalanceXFeTotal('modulo31', dtsTotal=dtBalance)
dtBalanceTotalEnd<-ModuloPropagacionMCBalanceTotal('modulo32', dtsTotall=dtBalanceTotal)
Moduloreporte('modulo4', datosRes = ReservMC,datosResMC=dtRes,  datosActRef=dtREF,
datosActRefMC=dtREFMC, datosActReS=dtRESUL, datosActReSMC=dtRESULMC,
datosBalanceMC=dtBalance, datosBalancexFExYrsMC=dtBalanceTotal, datosBalanceTotalXyrs=dtBalanceTotalEnd)
}
shinyApp(ui = ui, server = server)
system.file("www", "logo.png")
system.file()
system.file
ui <- fluidPage(
titlePanel(title = span(img(src = "C:\\R_ejerc\\shainyPrueba\\Incert\\Propagation\\www\\logo.png", height = 65),"Estimación de las reducciones de emisiones")),
tabsetPanel(
tabPanel("Reservorios", tabsetPanel(
tabPanel("Entrada",ReservorioUI('modulo0')),
tabPanel('result', ParaEntradaUI('modulo01'))
)),
tabPanel("Datos de actividad (referencia)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo1')),
tabPanel('result', ParaEntradaUI('modulo11')))),
tabPanel("Datos de actividad (resultados)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo2')),
tabPanel('result', ParaEntradaUI('modulo21')))),
tabPanel("Balance emisiones", tabsetPanel(
tabPanel('Resultados balance', ParaEntradaUI('modulo3')),
tabPanel('Balance por estrato', ParaEntradaUI('modulo31')),
tabPanel('Balance total', ParaEntradaUI('modulo32')))),
tabPanel("Guardar Reporte" ,Report('modulo4'))
) #Close outer tabsetPanel
)
server <- function(input, output, session) {
ReservMC <- fServer0("modulo0")
dtRes<-ModuloPropagacionMC('modulo01', datos = ReservMC)
dtREF<-fServerAct('modulo1')
dtREFMC<-ModuloPropagacionMCREF('modulo11', dts1=dtREF, dts2=dtRes)
dtRESUL<-fServerAct('modulo2')
dtRESULMC<-ModuloPropagacionMCRES('modulo21', dts1=dtRESUL, dts2=dtRes)
dtBalance<-ModuloPropagacionMCBalance('modulo3', dts1=dtRESULMC, dts2=dtREFMC)
dtBalanceTotal<-ModuloPropagacionMCBalanceXFeTotal('modulo31', dtsTotal=dtBalance)
dtBalanceTotalEnd<-ModuloPropagacionMCBalanceTotal('modulo32', dtsTotall=dtBalanceTotal)
Moduloreporte('modulo4', datosRes = ReservMC,datosResMC=dtRes,  datosActRef=dtREF,
datosActRefMC=dtREFMC, datosActReS=dtRESUL, datosActReSMC=dtRESULMC,
datosBalanceMC=dtBalance, datosBalancexFExYrsMC=dtBalanceTotal, datosBalanceTotalXyrs=dtBalanceTotalEnd)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = img(span(src = "logo.png", height = 65),"Estimación de las reducciones de emisiones")),
tabsetPanel(
tabPanel("Reservorios", tabsetPanel(
tabPanel("Entrada",ReservorioUI('modulo0')),
tabPanel('result', ParaEntradaUI('modulo01'))
)),
tabPanel("Datos de actividad (referencia)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo1')),
tabPanel('result', ParaEntradaUI('modulo11')))),
tabPanel("Datos de actividad (resultados)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo2')),
tabPanel('result', ParaEntradaUI('modulo21')))),
tabPanel("Balance emisiones", tabsetPanel(
tabPanel('Resultados balance', ParaEntradaUI('modulo3')),
tabPanel('Balance por estrato', ParaEntradaUI('modulo31')),
tabPanel('Balance total', ParaEntradaUI('modulo32')))),
tabPanel("Guardar Reporte" ,Report('modulo4'))
) #Close outer tabsetPanel
)
server <- function(input, output, session) {
ReservMC <- fServer0("modulo0")
dtRes<-ModuloPropagacionMC('modulo01', datos = ReservMC)
dtREF<-fServerAct('modulo1')
dtREFMC<-ModuloPropagacionMCREF('modulo11', dts1=dtREF, dts2=dtRes)
dtRESUL<-fServerAct('modulo2')
dtRESULMC<-ModuloPropagacionMCRES('modulo21', dts1=dtRESUL, dts2=dtRes)
dtBalance<-ModuloPropagacionMCBalance('modulo3', dts1=dtRESULMC, dts2=dtREFMC)
dtBalanceTotal<-ModuloPropagacionMCBalanceXFeTotal('modulo31', dtsTotal=dtBalance)
dtBalanceTotalEnd<-ModuloPropagacionMCBalanceTotal('modulo32', dtsTotall=dtBalanceTotal)
Moduloreporte('modulo4', datosRes = ReservMC,datosResMC=dtRes,  datosActRef=dtREF,
datosActRefMC=dtREFMC, datosActReS=dtRESUL, datosActReSMC=dtRESULMC,
datosBalanceMC=dtBalance, datosBalancexFExYrsMC=dtBalanceTotal, datosBalanceTotalXyrs=dtBalanceTotalEnd)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = img(span(src ="logo.png", height = 65),"Estimación de las reducciones de emisiones")),
tabsetPanel(
tabPanel("Reservorios", tabsetPanel(
tabPanel("Entrada",ReservorioUI('modulo0')),
tabPanel('result', ParaEntradaUI('modulo01'))
)),
tabPanel("Datos de actividad (referencia)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo1')),
tabPanel('result', ParaEntradaUI('modulo11')))),
tabPanel("Datos de actividad (resultados)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo2')),
tabPanel('result', ParaEntradaUI('modulo21')))),
tabPanel("Balance emisiones", tabsetPanel(
tabPanel('Resultados balance', ParaEntradaUI('modulo3')),
tabPanel('Balance por estrato', ParaEntradaUI('modulo31')),
tabPanel('Balance total', ParaEntradaUI('modulo32')))),
tabPanel("Guardar Reporte" ,Report('modulo4'))
) #Close outer tabsetPanel
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = span(img(src = "logo.png", height = 65),"Estimación de las reducciones de emisiones")),
tabsetPanel(
tabPanel("Reservorios", tabsetPanel(
tabPanel("Entrada",ReservorioUI('modulo0')),
tabPanel('result', ParaEntradaUI('modulo01'))
)),
tabPanel("Datos de actividad (referencia)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo1')),
tabPanel('result', ParaEntradaUI('modulo11')))),
tabPanel("Datos de actividad (resultados)", tabsetPanel(
tabPanel("Entrada", ActUI('modulo2')),
tabPanel('result', ParaEntradaUI('modulo21')))),
tabPanel("Balance emisiones", tabsetPanel(
tabPanel('Resultados balance', ParaEntradaUI('modulo3')),
tabPanel('Balance por estrato', ParaEntradaUI('modulo31')),
tabPanel('Balance total', ParaEntradaUI('modulo32')))),
tabPanel("Guardar Reporte" ,Report('modulo4'))
) #Close outer tabsetPanel
)
shinyApp(ui = ui, server = server)
getwd()
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
paste0(Dir, '\\incertidumbrePropagacion.r')
Dir<-'C:\\git_py\\CBFEMC\\BalanceEmsionesShiny' ##Agregar el directorio de la aplicación
paste0(Dir, '\\incertidumbrePropagacion.r')
source(paste0(Dir, '\\incertidumbrePropagacion.r'))
paste0(Dir, '\\FuncionesMC.r')
source(paste0(Dir, '\\FuncionesMC.r'))
source(paste0(Dir, '\\ModulosUI.r'))
source(paste0(Dir, '\\ModulosServer.r'))
source(paste0(Dir, '\\ui.r'))
source(paste0(Dir, '\\server.r'))
shinyApp(ui = ui, server = server)
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
View(ReservorioUI)
=44/12
44/12
View(fServer0)
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
ReservorioUI<- function(id) {
tagList(
sidebarPanel(
textInput(inputId = NS(id, "FE"), label = "Factor de emisión", value = "DEF"),
textInput(inputId = NS(id, "Reserv"), label = "Reservorio", value = "Tree"),
textInput(inputId = NS(id, "Estrat"), label = "Estrato", value = "1"),
numericInput(inputId = NS(id, "X"), label = "Media", value = 200),
numericInput(inputId = NS(id, "XEE"), label = "Error estandar", value = 2),
#actionButton(inputId = NS(id, "Add"), label = "Agregar valor"),
fluidRow(
column(width = 6,
actionButton(inputId = NS(id, "Add"), label = "Agregar valor")
),
column(width = 6,
verbatimTextOutput(outputId = NS(id, "RMCarbono"), label = "Peso molecular", placeholder = 3.666667)
#  numericInput(inputId = NS(id, "RMCarbono"), label = "Peso molecular", value = 3.666667, step = NULL)
)
)
),mainPanel(
DT::dataTableOutput(outputId = NS(id, "reserv"))
)
)
}
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
ParaEntradaUI<- function(id) {
tagList(
sidebarPanel(
numericInput(NS(id, "nseed"), "Semillas:", value = 126, min = 100, max = 200),
numericInput(NS(id, "num_simulaciones"), "Número de Simulaciones:", value = 10000, min = 1000, max = 50000, step =1000),
numericInput(NS(id, "IC"), "Nivel de confianza:", value = 95, min = 80, max = 99),
selectInput(NS(id,'Propaga'), 'Tipo de propagación',
choices = c("Adición", "Sustracción", 'Multiplicación'),
selected = "Adición"),
actionButton(inputId = NS(id, "Run"), label = "Ejecutar"),
numericInput(inputId = NS(id, "RMCarbono"), label = "Peso molecular",min = 3.666667,
max = 3.666667,
step = NA, value = 3.666667),
),mainPanel(
DT::dataTableOutput(outputId = NS(id, "RESULT"))
)
)
}
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
View(fServer0)
View(ModuloPropagacionMC)
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
library(shiny); runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
source("C:/git_py/CBFEMC/BalanceEmsionesShiny/ModulosServer.R")
datosRes, datosActRef, datosActRefMC, datosActReS, datosActReSMC,
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
Dir<-'C:/git_py/CBFEMC/BalanceEmsionesShiny' ##Agregar el directorio de la aplicación
source(paste0(Dir, '/FuncionesMC.r'))
source(paste0(Dir, '/ModulosUI.r'))
source(paste0(Dir, '/ModulosServer.r'))
source(paste0(Dir, '/ui.r'))
source(paste0(Dir, '/server.r'))
shinyApp(ui = ui, server = server)
Dir<-'C:/git_py/CBFEMC/BalanceEmsionesShiny' ##Agregar el directorio de la aplicación
source(paste0(Dir, '/FuncionesMC.r'))
source(paste0(Dir, '/ModulosUI.r'))
source(paste0(Dir, '/ModulosServer.r'))
source(paste0(Dir, '/ui.r'))
source(paste0(Dir, '/server.r'))
shinyApp(ui = ui, server = server)
paste0("# Reporte de estimaciones\n\n",
"### Reservorios\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(ResevorioDt), caption = 'Resevorios')\n",
"knitr::kable(head(ResevorioDtMC), caption = 'Total de estimación')\n\n",
"```\n\n","### Datos de actividad:\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(RefereDt), caption = 'Referencia')\n",
"knitr::kable(head(ReSereDt), caption = 'Resultados')\n\n",
"```\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(RefereDtMC), caption = 'Referencia Carbono Monte Carlo')\n",
"knitr::kable(head(ReSereDtMC), caption = 'Resultados Carbono Monte Carlo')\n\n",
"```\n\n",
"### Balances:\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(BalanceXEstratoFEYrsDt), caption = 'Resultados - Referencia. Monte Carlo')\n",
"knitr::kable(head(BalancexFEYrs), caption = 'Balance FE y Años. Monte Carlo')\n\n",
"knitr::kable(head(BalancexYrs), caption = 'Balance total por año. Monte Carlo')\n",
"```\n\n")
contenidoReporte <- paste0("# Reporte de estimaciones\n\n",
"### Reservorios\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(ResevorioDt), caption = 'Resevorios')\n",
"knitr::kable(head(ResevorioDtMC), caption = 'Total de estimación')\n\n",
"```\n\n","### Datos de actividad:\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(RefereDt), caption = 'Referencia')\n",
"knitr::kable(head(ReSereDt), caption = 'Resultados')\n\n",
"```\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(RefereDtMC), caption = 'Referencia Carbono Monte Carlo')\n",
"knitr::kable(head(ReSereDtMC), caption = 'Resultados Carbono Monte Carlo')\n\n",
"```\n\n",
"### Balances:\n\n",
"```{r setup, include=FALSE, warning=FALSE, message=FALSE}\n",
"knitr::kable(head(BalanceXEstratoFEYrsDt), caption = 'Resultados - Referencia. Monte Carlo')\n",
"knitr::kable(head(BalancexFEYrs), caption = 'Balance FE y Años. Monte Carlo')\n\n",
"knitr::kable(head(BalancexYrs), caption = 'Balance total por año. Monte Carlo')\n",
"```\n\n")
writeLines(contenidoReporte, "reporte_final.Rmd")
getwd()
Dir<-'C:/git_py/CBFEMC/BalanceEmsionesShiny' ##Agregar el directorio de la aplicación
source(paste0(Dir, '/FuncionesMC.r'))
source(paste0(Dir, '/ModulosUI.r'))
source(paste0(Dir, '/ModulosServer.r'))
source(paste0(Dir, '/ui.r'))
source(paste0(Dir, '/server.r'))
shinyApp(ui = ui, server = server)
library(DT)
library(dplyr)
library(rmarkdown)
library(knitr)
rm(list=ls())
#on.exit(setwd(tempdir()))
Dir<-'C:/git_py/CBFEMC/BalanceEmsionesShiny' ##Agregar el directorio de la aplicación
source(paste0(Dir, '/FuncionesMC.r'))
source(paste0(Dir, '/ModulosUI.r'))
source(paste0(Dir, '/ModulosServer.r'))
source(paste0(Dir, '/ui.r'))
source(paste0(Dir, '/server.r'))
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
includeMarkdown("reporte_final.Rmd")
includeMarkdown("reporte_final.Rmd")
rmarkdown::run("reporte_final.Rmd")
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
runApp('C:/git_py/CBFEMC/BalanceEmsionesShiny/Ejecutar.R')
rmarkdown::run(reporte_final.Rmd)
rmarkdown::run('reporte_final.Rmd')
setwd()
getwd()
setwd('C:/git_py/CBFEMC/BalanceEmsionesShiny')
getwd()
rmarkdown::run('reporte_final.Rmd')
runApp('Ejecutar.R')
runApp('Ejecutar.R')
runApp('Ejecutar.R')
runApp('Ejecutar.R')
