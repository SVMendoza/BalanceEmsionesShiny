VigorCafe[,Medicion:=as.character(Medicion)]
VigorCafe <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCafe)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
assoc(VigorCafe, shade=TRUE, labeling_args=labeling_args)
VigorCafe<-na.omit(dtCafe[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCafe<-merge(VigorCafe, Trat, by='Tratamiento')
VigorCafe[,Medicion:=as.character(Medicion)]
VigorCafe
dtCafe
VigorCafe<-na.omit(dtCafe[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCafe<-merge(VigorCafe, Trat, by='Tratamiento')
VigorCafe
dtCafe
dtCafe<-fread('C:\\R_ejerc\\Consultorias\\experimentoHN\\DtCafe.txt',encoding="Latin-1")
#dtBanano[,ID:=paste0(Bloque, Tratam, Medicion)]
dtCafe[,Medicion:=as.factor(Medicion)]
dtCafe[,Vigor:=as.ordered(Vigor)]
dtCafe[,Bloques:=as.factor(Bloque)]
dtCafe[,PP:=paste0(Bloques, Tratamiento)]
mAltCafe<-lme(Altura_cm ~1+Tratamiento+Medicion+Tratamiento:Medicion,random=list(Bloques=pdIdent(~1),Tratamiento=pdIdent(~1)),
weights=varComb(varExp(form=~as.numeric(Medicion))), method="REML", control=lmeControl(niterEM=150,msMaxIter=200),
na.action=na.omit ,data=dtCafe ,keep.data=FALSE)
mDiamCafe<-lme(Diametro_mm~1+Tratamiento+Medicion+Tratamiento:Medicion,random=list(Bloques=pdIdent(~1),Tratamiento=pdIdent(~1)),
weights=varComb(varExp(form=~as.numeric(Medicion))), method="REML", control=lmeControl(niterEM=150,msMaxIter=200),
na.action=na.omit ,data=dtCafe ,keep.data=FALSE)
mNHCafe<-glmmTMB(NtotalHojas~Tratamiento+Medicion+Tratamiento:Medicion+(1|Bloques)+(1|PP), family = poisson, data=dtCafe, na.action=na.omit)
dtCafe[Vigor==6,'Vigor']<-NA
dVigorCafe<-dtCafe[!is.na(Vigor),]
mVigorCaFE<-clmm(Vigor~Tratamiento+Medicion+Tratamiento:Medicion+(1|Bloques)+(1|PP), data=dVigorCafe)
#RVAideMemoire::Anova.clmm(mVigorCaFE, type="III")
dAnovaV<-data.table(variable='Vigor', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova.clmm(mVigorCaFE, type="III"))
names(dAnovaV)<-c('variable','Factor','Chisq', 'Df',"Pr(>Chisq)")
TablasAnovasCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mAltCafe, type='III', test.statistic='F')[-1,]),
data.table(variable='Diametro', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mDiamCafe, type='III', test.statistic='F')[-1,]) ,
data.table(variable='NH', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mNHCafe, type='III')[-1,]),
dAnovaV
))
#####################################
############################################################
emm3<-emmeans(mAltCafe, pairwise ~ Tratamiento|Medicion)
medias3<-data.frame(cld(emm3,Letters = letters[1:4]))
emm3<-emmeans(mDiamCafe, pairwise ~ Tratamiento|Medicion)
mediasDiam<-data.frame(cld(emm3,Letters = letters[1:4]))
emm3<-emmeans(mNHCafe, pairwise ~ Tratamiento|Medicion, type='response')
mediasNH<-data.frame(cld(emm3,Letters = letters[1:4]))
names(mediasNH)<-c('Tratamiento', 'Medicion', 'emmean','SE', 'df',  'lower.CL',  'upper.CL', '.group')
emm3<-emmeans(mVigorCaFE, pairwise ~ Tratamiento|Medicion)
mediasVigor<-data.frame(cld(emm3,Letters = letters[1:4]))
names(mediasVigor)<-c('Tratamiento', 'Medicion', 'emmean','SE', 'df',  'lower.CL',  'upper.CL', '.group')
MediasDtCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', medias3), data.table(variable='Diametro', mediasDiam),                                               data.table(variable='NH', mediasNH),data.table(variable='Vigor', mediasVigor)))
###################################################################################
DatosDiagnosticoCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', Residuos=resid(mAltCafe, type='pearson'), Ajustados=fitted(mAltCafe)),data.table(variable='Diametro', Residuos=resid(mDiamCafe, type='pearson'), Ajustados=fitted(mDiamCafe)),
data.table(variable='NH', Residuos=resid(mNHCafe, type='pearson'), Ajustados=predict(mNHCafe))))
dAnovaV<-data.table(variable='Vigor', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova.clmm(mVigorCaFE, type="III"))
names(dAnovaV)<-c('variable','Factor','Chisq', 'Df',"Pr(>Chisq)")
TablasAnovasCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mAltCafe, type='III', test.statistic='F')[-1,]),
data.table(variable='Diametro', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mDiamCafe, type='III', test.statistic='F')[-1,]) ,
data.table(variable='NH', Factor=c('Tratamiento'  , 'Medicion'  , 'Tratamiento:Medicion'), Anova(mNHCafe, type='III')[-1,]),
dAnovaV
))
#####################################
############################################################
emm3<-emmeans(mAltCafe, pairwise ~ Tratamiento|Medicion)
medias3<-data.frame(cld(emm3,Letters = letters[1:4]))
emm3<-emmeans(mDiamCafe, pairwise ~ Tratamiento|Medicion)
mediasDiam<-data.frame(cld(emm3,Letters = letters[1:4]))
emm3<-emmeans(mNHCafe, pairwise ~ Tratamiento|Medicion, type='response')
mediasNH<-data.frame(cld(emm3,Letters = letters[1:4]))
names(mediasNH)<-c('Tratamiento', 'Medicion', 'emmean','SE', 'df',  'lower.CL',  'upper.CL', '.group')
emm3<-emmeans(mVigorCaFE, pairwise ~ Tratamiento|Medicion)
mediasVigor<-data.frame(cld(emm3,Letters = letters[1:4]))
names(mediasVigor)<-c('Tratamiento', 'Medicion', 'emmean','SE', 'df',  'lower.CL',  'upper.CL', '.group')
MediasDtCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', medias3), data.table(variable='Diametro', mediasDiam),                                               data.table(variable='NH', mediasNH),data.table(variable='Vigor', mediasVigor)))
###################################################################################
DatosDiagnosticoCafe<-data.table(Cultivo='Cafe', rbind(data.table(variable='Altura', Residuos=resid(mAltCafe, type='pearson'), Ajustados=fitted(mAltCafe)),data.table(variable='Diametro', Residuos=resid(mDiamCafe, type='pearson'), Ajustados=fitted(mDiamCafe)),
data.table(variable='NH', Residuos=resid(mNHCafe, type='pearson'), Ajustados=predict(mNHCafe))))
TablasAnovas<-rbind(TablasAnovasBanano, TablasAnovasCafe, TablasAnovasCacao)
TablasAnovas$Chisq<-TablasAnovas$Chisq
TablasAnovas$Df<-TablasAnovas$Df
TablasAnovas[, 6]<-TablasAnovas[,6]
MediasDt<-rbind(MediasDtBanano, MediasDtCafe, MediasDtCacao)
MediasDt[,Tratamiento:=as.factor(Tratamiento)]
DatosDiagnostico<-rbind(DatosDiagnosticoBanano, DatosDiagnosticoCafe, DatosDiagnosticoCacao)
L<-list(TablasAnovas, MediasDt, DatosDiagnostico)
save(L, file='C:\\R_ejerc\\Consultorias\\experimentoHN\\Resultados.RData')
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCafe<-na.omit(dtCafe[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCafe<-merge(VigorCafe, Trat, by='Tratamiento')
VigorCafe[,Medicion:=as.character(Medicion)]
VigorCafe <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCafe)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
assoc(VigorCafe, shade=TRUE, labeling_args=labeling_args)
dtCacao
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCacao<-na.omit(dtCacao[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCacao<-merge(VigorCacao, Trat, by='Tratamiento')
VigorCacao[,Medicion:=as.character(Medicion)]
VigorCacao <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCacao)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
assoc(VigorCacao, shade=TRUE, labeling_args=labeling_args)
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCacao<-na.omit(dtCacao[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCacao<-merge(VigorCacao, Trat, by='Tratamiento')
VigorCacao[,Medicion:=as.character(Medicion)]
VigorCacao <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCacao)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
assoc(VigorCacao, shade=TRUE, labeling_args=labeling_args)
g<-assoc(Verdottb, shade=TRUE, labeling_args=labeling_args)
ggsave(g, file="VerdorBanano.png")
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion', EscaladeVerdor = 'Verdor'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(90, 90, 0, 90))
assoc(Verdottb, shade=TRUE, labeling_args=labeling_args)
png(file="VerdorBanano.png")
getwd()
assoc(Verdottb, shade=TRUE, labeling_args=labeling_args)
png(file="VerdorBanano.png")
png(file="VerdorBanano.png")
assoc(Verdottb, shade=TRUE, labeling_args=labeling_args)
dev.off()
getwd()
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\VerdorBanano.png")
assoc(Verdottb, shade=TRUE, labeling_args=labeling_args)
dev.off()
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\EntrenudosBanano.png")
assoc(EntreNudoDt, shade=TRUE, labeling_args=labeling_args)
dev.off()
EntreNudo<-na.omit(dtBanano[,.N, by=.(Tratamiento,Medicion,EscaladeEntrenudos)])
EntreNudo[,Medicion:=as.character(Medicion)]
EntreNudo<-merge(EntreNudo, Trat, by='Tratamiento')
EntreNudoDt <- xtabs(N~EscaladeEntrenudos+Tratamientos+Medicion, data=EntreNudo)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion', EscaladeEntrenudos = 'Entre nudos'), cex = 0.6, ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\EntrenudosBanano.png")
assoc(EntreNudoDt, shade=TRUE, labeling_args=labeling_args)
dev.off()
Vigor<-na.omit(dtBanano[,.N, by=.(Tratamiento,Medicion,Vigor)])
Vigor<-merge(Vigor, Trat, by='Tratamiento')
Vigor[,Medicion:=as.character(Medicion)]
Vigor <- xtabs(N~Vigor+Tratamientos+Medicion, data=Vigor)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\VigorBanano.png")
assoc(Vigor, shade=TRUE, labeling_args=labeling_args)
dev.off()
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCafe<-na.omit(dtCafe[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCafe<-merge(VigorCafe, Trat, by='Tratamiento')
VigorCafe[,Medicion:=as.character(Medicion)]
VigorCafe <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCafe)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\VigorCafe.png")
assoc(VigorCafe, shade=TRUE, labeling_args=labeling_args)
dev.off()
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCacao<-na.omit(dtCacao[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCacao<-merge(VigorCacao, Trat, by='Tratamiento')
VigorCacao[,Medicion:=as.character(Medicion)]
VigorCacao <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCacao)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\VigorCacao.png")
assoc(VigorCacao, shade=TRUE, labeling_args=labeling_args)
dev.off()
![image caption](C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\EntrenudosBanano.png)
![](C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\EntrenudosBanano.png)
![](C:\R_ejerc\Consultorias\experimentHNvsincomple\EntrenudosBanano.png)
![](C:\R_ejerc\Consultorias\experimentHNvsincomple\VigorCacao.png)
(C:\R_ejerc\Consultorias\experimentHNvsincomple\VigorCacao.png)
[](C:\R_ejerc\Consultorias\experimentHNvsincomple\VigorCacao.png)
!(C:\R_ejerc\Consultorias\experimentHNvsincomple\VigorCacao.png)
![]('VigorCacao.png')
![]('\VigorCacao.png')
![](\VigorCacao.png)
![](\VigorCacao.png)
# Reporte {data-icon="fas fa-newspaper"}
mis_colores <- c("orange", "green", "red", "forestgreen", "yellow","gray97", "black","pink", "brown")
ggplot(medias, aes(x = Medicion, y = emmean, group = Tratamiento, color = Tratamiento, fill = Tratamiento)) +
# geom_path(aes(group = .group), position = position_dodge(width = .9)) +
#geom_point(position = position_dodge(width = .9)) +
geom_text(aes(y = emmean + (1+SE)), label = medias$.group) +
geom_pointrange(aes(ymin = emmean - SE, ymax = emmean + SE), position = position_dodge(.1)) +
geom_line(aes(group = Tratamiento), position = position_dodge(width = .1)) +
xlab("Tratamientos") + ylab("Altura (cm)") +
scale_fill_manual(values = mis_colores) +  # Asignar colores manualmente al fill
theme_bw() +
theme(
text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 90, hjust = 1)
)
L
#renderPlot({
dtsPlot <- reactive({
if (!is.null(input$opcion)) {
Variable <- if (input$opcion == "Altura de la planta") {
'Altura'
} else if (input$opcion == "Diámetro del tallo") {
'Diametro'
} else if (input$opcion == "Número de hojas") {
'NH'
} else {
'Vigor'
}
subset(L[[2]], Cultivo == input$Cultivo & variable == Variable)
} else {
return(NULL)
}
})
ggplot(medias, aes(x = Medicion, y = emmean, group = Tratamiento, color = Tratamiento, fill = Tratamiento)) +
# geom_path(aes(group = .group), position = position_dodge(width = .9)) +
#geom_point(position = position_dodge(width = .9)) +
geom_text(aes(y = emmean + (1+SE)), label = medias$.group) +
geom_pointrange(aes(ymin = emmean - SE, ymax = emmean + SE), position = position_dodge(.1)) +
geom_line(aes(group = Tratamiento), position = position_dodge(width = .1)) +
xlab("Tratamientos") + ylab("Altura (cm)") +
scale_fill_manual(values = mis_colores) +  # Asignar colores manualmente al fill
ttheme(
text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 90, hjust = 1),
legend.position = c(0.7, 0.2),
legend.direction = "horizontal"
) + theme_bw()
# Vector de colores personalizados
mis_colores <- c("orange", "green", "red", "forestgreen", "yellow","gray97", "black","pink", "brown")
ggplot(medias, aes(x = Medicion, y = emmean, group = Tratamiento, color = Tratamiento, fill = Tratamiento)) +
# geom_path(aes(group = .group), position = position_dodge(width = .9)) +
#geom_point(position = position_dodge(width = .9)) +
geom_text(aes(y = emmean + (1+SE)), label = medias$.group) +
geom_pointrange(aes(ymin = emmean - SE, ymax = emmean + SE), position = position_dodge(.1)) +
geom_line(aes(group = Tratamiento), position = position_dodge(width = .1)) +
xlab("Tratamientos") + ylab("Altura (cm)") +
scale_fill_manual(values = mis_colores) +  # Asignar colores manualmente al fill
theme(
text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 90, hjust = 1),
legend.position = c(0.7, 0.2),
legend.direction = "horizontal"
) + theme_bw()
# Vector de colores personalizados
mis_colores <- c("orange", "green", "red", "forestgreen", "yellow","gray97", "black","pink", "brown")
ggplot(medias, aes(x = Medicion, y = emmean, group = Tratamiento, color = Tratamiento, fill = Tratamiento)) +
# geom_path(aes(group = .group), position = position_dodge(width = .9)) +
#geom_point(position = position_dodge(width = .9)) +
geom_text(aes(y = emmean + (1+SE)), label = medias$.group) +
geom_pointrange(aes(ymin = emmean - SE, ymax = emmean + SE), position = position_dodge(.1)) +
geom_line(aes(group = Tratamiento), position = position_dodge(width = .1)) +
xlab("Tratamientos") + ylab("Altura (cm)") +
scale_fill_manual(values = mis_colores) +  # Asignar colores manualmente al fill
theme(
text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 90, hjust = 1),
legend.position = c(0.7, 0.2),
legend.direction = "horizontal"
) + themeclassic()
# Vector de colores personalizados
mis_colores <- c("orange", "green", "red", "forestgreen", "yellow","gray97", "black","pink", "brown")
ggplot(medias, aes(x = Medicion, y = emmean, group = Tratamiento, color = Tratamiento, fill = Tratamiento)) +
# geom_path(aes(group = .group), position = position_dodge(width = .9)) +
#geom_point(position = position_dodge(width = .9)) +
geom_text(aes(y = emmean + (1+SE)), label = medias$.group) +
geom_pointrange(aes(ymin = emmean - SE, ymax = emmean + SE), position = position_dodge(.1)) +
geom_line(aes(group = Tratamiento), position = position_dodge(width = .1)) +
xlab("Tratamientos") + ylab("Altura (cm)") +
scale_fill_manual(values = mis_colores) +  # Asignar colores manualmente al fill
theme(
text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(angle = 90, hjust = 1),
legend.position = c(0.7, 0.2),
legend.direction = "horizontal"
) + theme_classic()
dtsPlot <- reactive({
if (!is.null(input$opcion)) {
Variable <- if (input$opcion == "Altura de la planta") {
'Altura'
} else if (input$opcion == "Diámetro del tallo") {
'Diametro'
} else if (input$opcion == "Número de hojas") {
'NH'
} else {
'Vigor'
}
subset(L[[2]], Cultivo == input$Cultivo & variable == Variable)
} else {
return(NULL)
}
})
## Rows {data-width="800"}
View(L)
L[[3]]
load(file='Resultados.RData')
Trat<-data.table(Tratamiento=c("Testigo","HidroNucleoDrench" ,"MusaCareFoliar","HidroNucleoFoliar", "CATIEDrench",       "SoilSetDrench",     "CATIEFoliar" ,      "SoilSetFoliar" ,"MusaCareDrench"), Tratamientos=c("T","HND" ,"MCF","HNF", "CD",       "SSD",     "CF" ,      "SSF" ,"MCD"))
VigorCacao<-na.omit(dtCacao[,.N, by=.(Tratamiento,Medicion,Vigor)])
VigorCacao<-merge(VigorCacao, Trat, by='Tratamiento')
VigorCacao[,Medicion:=as.character(Medicion)]
VigorCacao <- xtabs(N~Vigor+Tratamientos+Medicion, data=VigorCacao)
labeling_args <- list(set_varnames = c(Tratamientos = "Tratamiento", Medicion = 'Medicion'), cex = 0.6,ctext = list(rot_labels = c(0, 1)),rot_labels = c(0, 90, 0, 90))
png(file="C:\\R_ejerc\\Consultorias\\experimentHNvsincomple\\VigorCacao.png")
assoc(VigorCacao, shade=TRUE, labeling_args=labeling_args)
dev.off()
fread('DtBanano.txt')[,c(1,4:11)]
library(shiny); runApp('C:/git_py/CBFEMC/Ejecutar.R')
runApp('C:/git_py/CBFEMC/Ejecutar.r')
shinyApp(ui = ui, server = server)
runApp('C:/git_py/CBFEMC/Ejecutar.r')
runApp('C:/git_py/CBFEMC')
runApp('C:/git_py/CBFEMC/Ejecutar.r')
runApp('C:/git_py/CBFEMC/Ejecutar.r')
runApp('C:/git_py/CBFEMC/Ejecutar.r')
runApp('C:/git_py/CBFEMC/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
shinyApp(ui = ui, server = server)
options(rsconnect.max.bundle.size=5368709120)
shinyApp(ui = ui, server = server)
options(rsconnect.max.bundle.size=5368709120)
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
library(shiny); runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
devtools::install_github("rstudio/rsconnect")
library(shiny); runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
library(shiny); runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
library(shiny); runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar')
runApp('C:/git_py/CBFEMC/AppsDesplegar')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar/Ejecutar.r')
runApp('C:/git_py/CBFEMC/AppsDesplegar')
runApp('C:/git_py/CBFEMC/AppsDesplegar')
L
L<-list()
names(L[1])<-'hola'
L
setRepositories()
runApp('C:/git_py/CBFEMC/AppsDesplegar')
install.packages(c("config", "crosstalk", "crul", "curl", "data.table", "deepNN", "e1071", "flexdashboard", "future", "future.apply", "geojsonio", "gganimate", "ggcorrplot", "ggeffects", "ggfun", "ggimage", "ggm", "ggmap", "ggplot2", "ggplotify", "ggpolypath", "ggthemes", "glmmTMB", "htmlTable", "htmlwidgets", "lconnect", "link2GI", "mvtnorm", "networktools", "RCurl", "rJava", "RJSONIO", "rmarkdown", "roxygen2", "rstantools", "rstudioapi", "shiny", "shinytest", "shinyWidgets", "tmvtnorm", "utf8", "XML", "xml2", "yaml"))
shiny::runApp()
install.packages("shiny")
shiny::runApp()
runApp()
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(getwd())
source('ModulosUI.R')
source('ModulosServer.R')
source('FuncionesMC.R')
runApp()
source('ModulosServer.R')
ls()
source('FuncionesMC.R')
source('FuncionesMC.R')
ls()
source('FuncionesMC.R')
source('FuncionesMC.R')
####################
##SIMULACION
IMC<-cmpfun(function(propag.Vari, nsim, Mean, SE, nplot, CI, type.Propag='Subtraction', plot=TRUE) {
if(is.null(propag.Vari) & (toupper(type.Propag)=='ADDITION' | toupper(type.Propag)=='MULTIPLICATION' | toupper(type.Propag)=='SUBTRACTION')) stop('The propagation variable is necessary')
alpha<-1-(CI/100)
Mean<-Mean
SE<-SE
x <- rbind(Mean, SE)
if(toupper(type.Propag)=='ADDITION' | toupper(type.Propag)=='MULTIPLICATION' | toupper(type.Propag)=='SUBTRACTION'){
propag.Vari<-propag.Vari
sel<-which(apply(x,2,sum)!=0)
x<-x[,sel]
if(!is.matrix(x) & is.vector(x)) {
salEnd<-data.frame(0, 0, 0,0,0)
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
}
else {
colnames(x)<-propag.Vari[sel]
propag.Vari<-propag.Vari[sel]
if(toupper(type.Propag) =='ADDITION') {EX1 <-str2expression(eval((paste(propag.Vari, collapse='+')))[1])}
else if(toupper(type.Propag) =='MULTIPLICATION') {EX1 <-str2expression(eval((paste(propag.Vari, collapse='*')))[1]) }
else if(toupper(type.Propag) =='SUBTRACTION') { EX1 <-str2expression(eval((paste(propag.Vari, collapse='-')))[1]) }
if(!is.null(nplot))  PP<-propagate(EX1, data=x, alpha = alpha, nsim =nsim, df =nplot)
else PP<-try(propagate(EX1, data=x, alpha = alpha, nsim =nsim),silent = TRUE)
}
}
########################
else {
EX1<-expression(x)
x=c(Mean[1],SE[1])
x<-as.data.frame(x)
if(Mean==0)  {salEnd<-data.frame(0, 0, 0,0,0)
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
}
else {
if(!is.null(nplot))  PP<-propagate(EX1, data=x, alpha = alpha, nsim =nsim, df =nplot, type = "stat")
else PP<-try(propagate(EX1, data=x, alpha = alpha, nsim =nsim),silent = TRUE)
}
}
sal<-PP$sim
if(isTRUE(plot)) {hist(PP$resSIM, xlab='Simulation', main='')
abline(v= sal[5], col='red', lty=2)
abline(v= sal[6], col='red')
abline(v=sal[1], col='blue')
# abline(v=sal[2], col='green')
}
#try(eval(EX1, envir = as.list(x[1, ])), silent = TRUE),
salEnd<-data.frame( sal[1], sal[2], sal[5],sal[6],
(1/2*((sal[6]-sal[5])/sal[1])))
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
})
library(compiler)
####################
##SIMULACION
IMC<-cmpfun(function(propag.Vari, nsim, Mean, SE, nplot, CI, type.Propag='Subtraction', plot=TRUE) {
if(is.null(propag.Vari) & (toupper(type.Propag)=='ADDITION' | toupper(type.Propag)=='MULTIPLICATION' | toupper(type.Propag)=='SUBTRACTION')) stop('The propagation variable is necessary')
alpha<-1-(CI/100)
Mean<-Mean
SE<-SE
x <- rbind(Mean, SE)
if(toupper(type.Propag)=='ADDITION' | toupper(type.Propag)=='MULTIPLICATION' | toupper(type.Propag)=='SUBTRACTION'){
propag.Vari<-propag.Vari
sel<-which(apply(x,2,sum)!=0)
x<-x[,sel]
if(!is.matrix(x) & is.vector(x)) {
salEnd<-data.frame(0, 0, 0,0,0)
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
}
else {
colnames(x)<-propag.Vari[sel]
propag.Vari<-propag.Vari[sel]
if(toupper(type.Propag) =='ADDITION') {EX1 <-str2expression(eval((paste(propag.Vari, collapse='+')))[1])}
else if(toupper(type.Propag) =='MULTIPLICATION') {EX1 <-str2expression(eval((paste(propag.Vari, collapse='*')))[1]) }
else if(toupper(type.Propag) =='SUBTRACTION') { EX1 <-str2expression(eval((paste(propag.Vari, collapse='-')))[1]) }
if(!is.null(nplot))  PP<-propagate(EX1, data=x, alpha = alpha, nsim =nsim, df =nplot)
else PP<-try(propagate(EX1, data=x, alpha = alpha, nsim =nsim),silent = TRUE)
}
}
########################
else {
EX1<-expression(x)
x=c(Mean[1],SE[1])
x<-as.data.frame(x)
if(Mean==0)  {salEnd<-data.frame(0, 0, 0,0,0)
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
}
else {
if(!is.null(nplot))  PP<-propagate(EX1, data=x, alpha = alpha, nsim =nsim, df =nplot, type = "stat")
else PP<-try(propagate(EX1, data=x, alpha = alpha, nsim =nsim),silent = TRUE)
}
}
sal<-PP$sim
if(isTRUE(plot)) {hist(PP$resSIM, xlab='Simulation', main='')
abline(v= sal[5], col='red', lty=2)
abline(v= sal[6], col='red')
abline(v=sal[1], col='blue')
# abline(v=sal[2], col='green')
}
#try(eval(EX1, envir = as.list(x[1, ])), silent = TRUE),
salEnd<-data.frame( sal[1], sal[2], sal[5],sal[6],
(1/2*((sal[6]-sal[5])/sal[1])))
names(salEnd)<-c('Mean', 'S.E',paste0('Lower',' (',CI,'%)'), paste0('Upper',' (',CI,'%)'), paste0('Uncertainty',' ', CI,'%'))
return(salEnd)
})
source('FuncionesMC.R')
runApp()
runApp()
runApp()
runApp()
source('ModulosUI.R')
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(fontawesome)
library(shinyalert)
library(rmarkdown)
library(knitr)
library(DT)
library(dplyr)
library(R6)
library(compiler)
library(propagate)
Dir<-getwd() ##Agregar el directorio de la aplicación
print(Dir)
Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
source('ModulosUI.R')
source('ModulosServer.R')
source('FuncionesMC.R')
source('ui.R')
source('server.R')
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
